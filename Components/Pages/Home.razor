@page "/Home"


<PageTitle>Home</PageTitle>
<div class="home-container">

    <div class="for-padding">
                

            
            <ul class="side-list @(isCollapsed ? "collapsed" : "")">
            <li>
                <div class="open-sidebar " @onclick="toggleSidebar">
                    <ul class="hamburger @(isCollapsed ? "collapsed" : "")">
                        <li class="l1" style="height: 3px; background: white;"></li>
                        <li class="l2" style="height: 3px; background: white;"></li>
                        <li class="l3" style="height: 3px; background: white;"></li>
                    </ul>
                </div>
            </li>
                <li>Y</li>
                <li>Z</li>
            </ul>

            <ul class="main-list @(isCollapsed ? "collapsed" : "")">
                <li @onclick="() => ScrollToAdd()">Add</li>
                <li @onclick="ScrollToSee">See</li>
                <li>Contact</li>
            </ul>

        <main class="main-container @(isCollapsed ? "collapsed" : "")">

            <section class="add-budget">

                <div class="add-header section-headers">
                    <h1>ADD</h1>
                    <div class="line"></div>
                </div>

                <section class="inputs-container">
                    <div class="inputs">
                        <label for="itemInput">Item</label>
                        <input type="text" @bind-value="ItemVar" name="itemInput" />
                        
                        <label for="merchantInput">Merchant</label>
                        <input type="text" @bind-value="MerchantVar" name="merchantInput">

                        <label for="categoryInput">Category</label>
                        <input type="text" @bind-value="CategoryVar" name="categoryInput">
                        
                        <label for="descriptionInput">Description</label>
                        <textarea @bind="DescriptionVar" name="descriptionInput"></textarea>

                        <label for="countInput">Count</label>
                        <input type="number" @bind-value="CountVar" name="countInput" step="1" min="0">

                        <label for="priceInput">Price</label>
                        <input type="number" @bind-value="PriceVar" name="priceInput" step="1" min="0">
                    </div>

                    <div class="file-upload">
                        <label class="upload-btn">
                            @if (string.IsNullOrEmpty(SelectedImageBase64))
                            {
                                <p style="font-size: 20px;">Choose Image</p>
                                <p>Max Image Size: 5MB</p>
                            }
                            
                            <InputFile OnChange="HandleSelectedFile" class="hidden-file" style="display: none;" />
                            @if (!string.IsNullOrEmpty(SelectedImageBase64) && isImage)
                            {
                                <img src="@SelectedImageBase64" alt="Preview" />
                            } else if (!string.IsNullOrEmpty(SelectedImageBase64) && !isImage) 
                            {
                                <p style="color: red;">Selected file is not an image!</p>
                            }


                        </label>
                    </div>
                </section>


                <div class="submit-forms">
                    <button @onclick="Delete">Delete</button>
                    <button @onclick="Send">Send</button>
                </div>

            </section>

            <section class="see-data">
                
                <div class="see-navigations">
                    <button @onclick="goToTesting">TestingGo</button>
                    <button @onclick="goToData">DataGo</button>
                </div>
                
                <section class="testing">
                    
                    <div style="padding: 20px;">
                        <div class="charts-header section-headers">
                            <h1>CHARTS</h1>
                            <div class="line"></div>
                        </div>
                        Hello
                    </div>
                 </section>

                <section class="data-container">
                   
                    <div style="padding: 20px;">
                        <div class="table-header section-headers">
                            <h1>TABLE</h1>
                            <div class="line"></div>
                        </div>
                        
                        <table>
                            <tr>
                                <th>Item Name</th>
                                <th>Category</th>
                                <th>Count</th>
                                <th>Price</th>
                                <th>Image</th>
                                <th>Action</th>
                            </tr>

                            @if (isLoading)
                            {
                                <tr>
                                    <td>Data are loading, please wait...</td>
                                </tr>
                            } else
                            {
                                foreach (var inputs in outputs)
                                {
                                    <tr>

                                        <td><p>@inputs.ItemName</p></td>
                                        <td><p>@inputs.Category</p></td>
                                        <td><p>@inputs.Count</p></td>
                                        <td><p>@inputs.Price</p></td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(inputs.InvoiceBase64))
                                            {
                                                <img src="data:@inputs.ContentType;base64,@inputs.InvoiceBase64" style="width: 50%; height: auto;" />
                                            }
                                            else
                                            {
                                                <p>Invoice image not available!</p>
                                            }

                                        </td>
                                        <td><button @onclick="() => DeleteCertain(inputs.Id)">@inputs.ItemName Delete</button></td>

                                    </tr>
                                }
                            }
                            
                        </table>
                    </div>
                    
                </section>

            </section>

        </main>
    </div>
    
</div>




@code{
    protected string ItemVar = string.Empty;
    protected string MerchantVar = string.Empty;
    protected string CategoryVar = string.Empty;
    protected string DescriptionVar = string.Empty;
    protected int GoalVar = 0;
    protected int CountVar = 0;
    protected int PriceVar = 0;
    protected bool isCollapsed = false;
    protected byte[] SelectedImageBytes { get; set; }
    protected string? SelectedImageBase64 { get; set; }
    protected bool isImage = false;
    protected IBrowserFile? fileSave;
    protected string? base64Save = string.Empty;
    protected bool isLoading;

    [Inject] public IJSRuntime js { get; set; }
    [Inject] public BudgetContext _context { get; set; }
    protected List<BudgetDatabase> outputs { get; set; } = new List<BudgetDatabase>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("myAnimations.runAll");
            await js.InvokeVoidAsync("setupBeforeUnload");
            await js.InvokeVoidAsync("lockScroll");
        }

    }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        outputs = await _context.Budgets.ToListAsync();
        isLoading = false;
    }

    protected async Task toggleSidebar()
    {
        isCollapsed = !isCollapsed;
    }

    public async Task HandleKeyEvent(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Task.Delay(100);
            await Send();
        }
    }

    public async Task HandleSelectedFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        fileSave = file;
        if (file != null && file.ContentType.StartsWith("image/",StringComparison.OrdinalIgnoreCase))
        {
            isImage = true;
            using var stream = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize: 5_000_000).CopyToAsync(stream); // 5MB limit
            SelectedImageBytes = stream.ToArray();

            var base64 = Convert.ToBase64String(SelectedImageBytes);
            base64Save = base64;
            SelectedImageBase64 = $"data:{file.ContentType};base64,{base64}";
        } else
        {
            isImage = false;
            SelectedImageBase64 = null;
        }
    }

    public async Task Send()
    {
        var inputs = new BudgetDatabase
            {
                ItemName = ItemVar,
                Merchant = MerchantVar,
                Category = CategoryVar,
                Description = DescriptionVar,
                Count = CountVar,
                Price = PriceVar,
                InvoiceBase64 = base64Save,
                ContentType = fileSave?.ContentType ?? string.Empty
            };
        _context.Budgets.Add(inputs);
        await _context.SaveChangesAsync();

        base64Save = string.Empty;
        fileSave = null;

       await UpdateUI();
    }

    public async Task Delete()
    {
        var sessionInputs = await _context.Budgets.ToListAsync();
        _context.Budgets.RemoveRange(sessionInputs);
        await _context.SaveChangesAsync();

        UpdateUI();
    }

    public async Task DeleteCertain(int? id)
    {
        var message = await _context.Budgets.
        Where(m => m.Id == id).ToListAsync();
        _context.Budgets.RemoveRange(message);
        await _context.SaveChangesAsync();

        UpdateUI();
    }

    public async Task ScrollToAdd() => await js.InvokeVoidAsync("Add");


    public async Task ScrollToSee() => await js.InvokeVoidAsync("See");

    public async Task goToTesting() => await js.InvokeVoidAsync("Testing");

    public async Task goToData() => await js.InvokeVoidAsync("Data");


    public async Task UpdateUI()
    {
        outputs = await _context.Budgets.ToListAsync();
        StateHasChanged();
    }
}