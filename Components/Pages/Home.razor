@page "/Home"


<PageTitle>Home</PageTitle>
<div class="home-container">

    <div class="for-padding">

            <ul class="side-list @(isCollapsed ? "collapsed" : "")">
            <li>
                <div class="open-sidebar " @onclick="toggleSidebar">
                    <ul class="hamburger @(isCollapsed ? "collapsed" : "")">
                        <li class="l1" style="height: 3px; background: white;"></li>
                        <li class="l2" style="height: 3px; background: white;"></li>
                        <li class="l3" style="height: 3px; background: white;"></li>
                    </ul>
                </div>
            </li>
                <li>Y</li>
                <li>Z</li>
            </ul>

            <ul class="main-list @(isCollapsed ? "collapsed" : "")">
                <li @onclick="() => ScrollToAdd()">Add</li>
                <li @onclick="ScrollToSee">See</li>
                <li>Contact</li>
            </ul>

        <main class="main-container @(isCollapsed ? "collapsed" : "")">

            <section class="add-budget">

                <div class="add-header section-headers">
                    <h1>ADD</h1>
                    <div class="line"></div>
                </div>

                <section class="inputs-container">
                    <div class="inputs">
                        <label for="itemInput">Item</label>
                        <input type="text" @bind="ItemVar" name="itemInput"/>
                        
                        <label for="merchantInput">Merchant</label>
                        <input type="text" @bind="MerchantVar" name="merchantInput">

                        <label for="categoryInput">Category</label>
                        <input type="text" @bind="CategoryVar" name="categoryInput">
                        
                        <label for="descriptionInput">Description</label>
                        <textarea @bind="DescriptionVar" name="descriptionInput"></textarea>

                        <label for="countInput">Count</label>
                        <input type="number" @bind="CountVar" name="countInput" step="1" min="0">

                        <label for="priceInput">Price</label>
                        <input type="number" @bind="PriceVar" name="priceInput" step="1" min="0">
                    </div>

                    <div class="file-upload">
                        <label class="upload-btn">
                            @if (string.IsNullOrEmpty(SelectedImageBase64))
                            {
                                <p style="font-size: 20px;">Choose Image</p>
                                <p>Max Image Size: 5MB</p>
                            }
                            
                            <InputFile OnChange="HandleSelectedFile" class="hidden-file" style="display: none;" />
                            @if (!string.IsNullOrEmpty(SelectedImageBase64) && isImage)
                            {
                                <img src="@SelectedImageBase64" alt="Preview" />
                            } else if (!string.IsNullOrEmpty(SelectedImageBase64) && !isImage) 
                            {
                                <p style="color: red;">Selected file is not an image!</p>
                            }


                        </label>
                    </div>
                </section>


                <div class="submit-forms">
                    <button @onclick="Delete">Delete</button>
                    <button @onclick="Send">Send</button>
                </div>

            </section>

            <section class="see-data">
                
                <div class="scroll-visuals" style="display: @(seeDataDisplay ? "flex" : "none")">

                    <section class="testing">

                        <div class="graph-container" style="padding: 20px;">
                            <div class="charts-header section-headers">
                                <h1>CHARTS</h1>
                                <div class="line"></div>
                            </div>

                            <div class="main-charts-container">
                                <div id="pie-container"></div>
                                <div id="bar-container"></div>
                            </div>
                        </div>
                    </section>

                    <section class="data-container">

                        <div style="padding: 20px;">
                            <div class="table-header section-headers">
                                <h1>TABLE</h1>
                                <div class="line"></div>
                            </div>

                            <table>
                                <tr>
                                    <th>Item Name</th>
                                    <th>Category</th>
                                    <th>Count</th>
                                    <th>Price</th>
                                    <th>Image</th>
                                    <th>Action</th>
                                </tr>

                                @if (isLoading)
                                {
                                    <tr>
                                        <td>Data are loading, please wait...</td>
                                    </tr>
                                }
                                else
                                {
                                    foreach (var inputs in outputs)
                                    {
                                        <tr>

                                            <td><p>@inputs.ItemName</p></td>
                                            <td><p>@inputs.Category</p></td>
                                            <td><p>@inputs.Count</p></td>
                                            <td><p>@inputs.Price</p></td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(inputs.ContentType))
                                                {
                                                    <img src="/images/@inputs.Id" style="width: 50%; height: auto;" />
                                                }
                                                else
                                                {
                                                    <p>Invoice image not available!</p>
                                                }

                                            </td>
                                            <td>
                                                <button @onclick="() => DeleteCertain(inputs.Id)">@inputs.ItemName Delete</button>
                                                <button @onclick="() => MoreCertain(inputs.Merchant)">@inputs.Merchant More</button>
                                                
                                            </td>

                                        </tr>
                                    }
                                }

                            </table>
                        </div>

                    </section>

                </div>
                <div id="more-chart" style="display: @(!seeDataDisplay ? "block" : "none"); height: 100%;"></div>

                <div class="see-navigations">
                    <button @onclick="goToTesting"><i class="fas fa-chart-bar"></i></button>
                    <button @onclick="goToData"><i class="fas fa-table"></i></button>
                </div>

            </section>

        </main>
    </div>
    
</div>




@code{
    protected string ItemVar = string.Empty;
    protected string MerchantVar = string.Empty;
    protected string CategoryVar = string.Empty;
    protected string DescriptionVar = string.Empty;
    protected int GoalVar = 0;
    protected int CountVar = 0;
    protected int PriceVar = 0;
    protected bool isCollapsed = false;
    protected byte[] SelectedImageBytes { get; set; }
    protected string? SelectedImageBase64 { get; set; }
    protected bool isImage = false;
    protected IBrowserFile? fileSave;
    protected string? base64Save = string.Empty;
    protected bool isLoading;
    protected bool _chartLoaded = false;
    protected bool seeDataDisplay = true;

    [Inject] public IJSRuntime js { get; set; }
    [Inject] public BudgetContext _context { get; set; }
    protected List<BudgetDatabase> outputs { get; set; } = new List<BudgetDatabase>();
    protected List<string> Items { get; set; } = new();
    protected List<double> Amounting { get; set; } = new();
    protected List<int> Count { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("myAnimations.runAll");
            await js.InvokeVoidAsync("setupBeforeUnload");
        }

        if (!_chartLoaded && Items.Any() && Amounting.Any())
        {
            await js.InvokeVoidAsync("loadHighchartsItem", Items, Amounting, Count);
            _chartLoaded = true; // so we don't call it repeatedly
        }
    }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        var budgets = await _context.Budgets
                        .AsNoTracking()
                        .Select(b => new BudgetDatabase
                        {
                            Id = b.Id,
                            ItemName = b.ItemName,
                            Category = b.Category,
                            Count = b.Count,
                            Price = b.Price,
                            ContentType = b.ContentType,
                            Merchant = b.Merchant
                        })
                        .ToListAsync();
        outputs = budgets;

        Items = budgets.Select(x => x.ItemName).ToList();
        Amounting = budgets.Select(x => (double)(x.Count * x.Price)).ToList();
        Count = budgets.Select(x => x.Count).ToList();

        isLoading = false;

        StateHasChanged();
    }

    protected async Task toggleSidebar()
    {
        isCollapsed = !isCollapsed;
    }

    public async Task HandleKeyEvent(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Task.Delay(100);
            await Send();
        }
    }

    public async Task HandleSelectedFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        fileSave = file;
        if (file != null && file.ContentType.StartsWith("image/",StringComparison.OrdinalIgnoreCase))
        {
            isImage = true;
            using var stream = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize: 5_000_000).CopyToAsync(stream); // 5MB limit
            SelectedImageBytes = stream.ToArray();

            var base64 = Convert.ToBase64String(SelectedImageBytes);
            SelectedImageBase64 = $"data:{file.ContentType};base64,{base64}";
        } else
        {
            isImage = false;
            SelectedImageBase64 = null;
        }
    }

    public async Task Send()
    {
        var inputs = new BudgetDatabase
            {
                ItemName = ItemVar,
                Merchant = MerchantVar,
                Category = CategoryVar,
                Description = DescriptionVar,
                Count = CountVar,
                Price = PriceVar,
                ImageByte = SelectedImageBytes,
                ContentType = fileSave?.ContentType ?? string.Empty
            };
        _context.Budgets.Add(inputs);
        await _context.SaveChangesAsync();
        fileSave = null;

        SelectedImageBase64 = null;

        ItemVar = string.Empty;
        MerchantVar = string.Empty;
        CategoryVar = string.Empty;
        DescriptionVar = string.Empty;
        CountVar = 0;
        PriceVar = 0;

        await UpdateUI();
    }

    public async Task Delete()
    {
        var sessionInputs = await _context.Budgets.ToListAsync();
        _context.Budgets.RemoveRange(sessionInputs);
        await _context.SaveChangesAsync();

        await UpdateUI();
    }

    public async Task DeleteCertain(int? id)
    {
        var message = await _context.Budgets.
        Where(m => m.Id == id).ToListAsync();

        _context.Budgets.RemoveRange(message);
        await _context.SaveChangesAsync();

        await UpdateUI();
    }

    public async Task ScrollToAdd() => await js.InvokeVoidAsync("Add");


    public async Task ScrollToSee() { await js.InvokeVoidAsync("loadHighchartsItem", Items, Amounting, Count); await js.InvokeVoidAsync("See"); }

    public async Task goToTesting() => await js.InvokeVoidAsync("Testing");

    public async Task goToData() => await js.InvokeVoidAsync("Data");

    public async Task MoreCertain(string merchant)
    {
        seeDataDisplay = false;

        // Filter the budgets for the given merchant
        var filteredBudgets = outputs.Where(x => x.Merchant == merchant).ToList();


        // Prepare JS arrays
        var itemNames = filteredBudgets.Select(x => x.ItemName ?? "Unknown").ToList();
        var amounts = filteredBudgets.Select(x => (double)(x.Count * x.Price)).ToList();

        await js.InvokeVoidAsync("loadChartForCertainMerchant", itemNames, amounts, merchant);
    }
    public async Task UpdateUI()
    {
        outputs = await _context.Budgets.ToListAsync();
        await js.InvokeVoidAsync("loadHighchartsItem", Items, Amounting, Count);
        StateHasChanged();
    }
}